import osimport randomimport numpy as npimport pandas as pdimport seaborn as snsimport matplotlib.pyplot as pltfrom sklearn.model_selection import train_test_splitfrom sklearn.preprocessing import LabelEncoderfrom sklearn.preprocessing import OneHotEncoderrandom.seed(0)## loading the filehealth_care = pd.read_csv('./healthcare/train_data.csv', na_values=['NA', 'NaN', '?'])# Dropping na columns for nowhealth_care = health_care.dropna()# Function to hot encode the column with name : name for dataframe dfdef encode_text_dummy(df, name):    dummies = pd.get_dummies(df[name])    for x in dummies.columns:        dummy_name = f"{name}-{x}"        df[dummy_name] = dummies[x]    df.drop(name, axis=1, inplace=True) ## inplace to make changed on the original df    '''# Feature EngineeringWe will add 1 feature : - Visit number- New Patient'''# Counting visit numbern = health_care.shape[0]visits = []patientid = np.array(health_care['patientid'])for i in range(n) :    count = (patientid[:i+1] == patientid[i]).sum()    visits.append(count)    # Adding 2 features    health_care['Visit Number'] = visitshealth_care['New Patient'] = (health_care['Visit Number']==1).astype('int32')# Re aranging dataframe columns ordercolumns = ['case_id', 'Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',       'Hospital_region_code', 'Available Extra Rooms in Hospital',       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',       'patientid','New Patient', 'Visit Number', 'City_Code_Patient', 'Type of Admission',       'Severity of Illness', 'Visitors with Patient', 'Age',       'Admission_Deposit', 'Stay']health_care = health_care[columns]# LABEL ENCODED DATA## Pre processing these columnsstring_columns = ['Hospital_type_code', 'Hospital_region_code', 'Department', 'Ward_Type', 'Ward_Facility_Code',  'Type of Admission', 'Severity of Illness', 'Age' ]encoder = LabelEncoder()#ohEncoder = OneHotEncoder()## label_encoded data initialisationX_le = health_care.drop(['Stay', 'case_id'], axis=1) # dropping case idy_le = health_care['Stay']## label encodingy_le = encoder.fit_transform(y_le)for column in string_columns :    X_le[column] = encoder.fit(X_le[column]).transform(X_le[column])# transforming targety_le = 10*y_le + 5# Function to return Label Encoded datadef health_care_le() :    return X_le, y_le# HOT ENCODED DATAle_string_columns = [  'Severity of Illness', 'Age' ]dummies_string_columns = ['Hospital_type_code', 'Hospital_region_code', 'Department', 'Ward_Type', 'Ward_Facility_Code',  'Type of Admission']encoder = LabelEncoder()## label_encoded dataXe = health_care.drop(['Stay', 'case_id'], axis=1)Xe['Severity of Illness']= Xe['Severity of Illness'].map({'Minor': 0,  'Moderate': 1,'Extreme': 2})Xe['Age'] = encoder.fit_transform(Xe['Age'])ye = health_care['Stay']ye = encoder.fit_transform(ye)ye = 10*ye + 5yefor column in dummies_string_columns :    encode_text_dummy(Xe, column)    # Function to return Hot encoded Datadef health_care_ohe() :    return Xe, ye